@page "/"
@using Hsbot.Core.Messaging
@using System.Text.RegularExpressions

@inject NavigationManager NavigationManager

<div class="content px-4">
    <div class="form-row">
        <div class="col">
            <div class="input-group">
                <div class="input-group-prepend">
                    <div class="input-group-text">#</div>
                </div>
                <input id="channel" class="form-control @channelValidationState" placeholder="Channel" type="text" maxlength="32" @bind="@_channel" required />
            </div>
        </div>
        <div class="col">
            <div class="input-group">
                <div class="input-group-prepend">
                    <div class="input-group-text">@@</div>
                </div>
                <input id="username" class="form-control @userNameValidationState" placeholder="Username" type="text" maxlength="32" @bind="@_userName" required />
            </div>
        </div>
    </div>
    <div class="chat-content">
        @if (_messages.Count == 0)
        {
            <div class="channel">No messages sent yet.</div>
        }
        @foreach (var item in _messages)
        {
            @if (item.IndicateTyping)
            {
                <div class="message">
                    <span class="channel">@item.Channel</span>
                    <span class="msg typing">@item.Username is typing...</span>
                </div>
            }

            @if (!string.IsNullOrEmpty(item.Body))
            {
                <div class="message">
                    <span class="channel">@item.Channel</span>
                    <span class="user">@item.Username</span>
                    <span class="msg">@((MarkupString)FormatText(item.Body))</span>
                </div>
            }

            @if (item.Attachments != null && item.Attachments.Count > 0)
            {
                foreach (var attachment in item.Attachments)
                {
                    <div class="message">
                        <span class="channel">@item.Channel</span>
                        <span class="user">@item.Username</span>
                        <span class="msg"><img src="@attachment.ImageUrl"/></span>
                    </div>
                }
            }

            @if (!string.IsNullOrEmpty(item.FileName))
            {
                <div class="message">
                    <span class="channel">@item.Channel</span>
                    <span class="user">@item.Username</span>
                    <span class="file-name">@item.FileName</span>
                </div>
                <div class="file-contents">
                    @item.FileContents
                </div>
            }
        }
    </div>
    <div class="form-row">
        <div class="input-group">
            <input type="text" class="form-control" placeholder="enter your comment" @bind="@_newMessage" @onkeyup="@OnMessageKeyUp" />
            <div class="input-group-append">
                <button class="btn btn-success" type="button" @onclick="@SendAsync"><span class="oi oi-share"></span></button>
            </div>
        </div>
    </div>
</div>

@code  {
    bool _connected = false;
    string _channel = null;
    string _userName = null;
    ChatClient _client = null;
    string _newMessage = null;
    List<Message> _messages = new List<Message>();

    string channelValidationState = "";
    string userNameValidationState = "";

    protected override async Task OnInitializedAsync()
    {
        await Connect();
        await base.OnInitializedAsync();
    }

    async Task Connect()
    {
        if (_connected) return;

        try
        {
            _messages.Clear();

            _client = new ChatClient(NavigationManager.BaseUri);
            _client.MessageReceived += MessageReceived;
            _client.FileUploadReceived += UploadReceived;

            Console.WriteLine("Index: chat starting...");
            await _client.StartAsync();
            Console.WriteLine("Index: chat started.");

            _connected = true;
        }

        catch (Exception e)
        {
            Console.WriteLine(e.Message);
            Console.WriteLine(e.StackTrace);
        }
    }

    void MessageReceived(object sender, OutboundResponse e)
    {
        Console.WriteLine($"Blazor: receive {e.Channel}: {e.UserId} {e.Text}");

        var newMsg = new Message(e);
        _messages.Add(newMsg);

        StateHasChanged();
    }

    void UploadReceived(object sender, FileContentResponse e)
    {
        Console.WriteLine($"Blazor: receive {e.Channel}: {e.UserId} {e.FileName}");

        var newMsg = new Message(e);
        _messages.Add(newMsg);

        StateHasChanged();
    }

    async Task SendAsync()
    {
        if (!_connected) await Connect();

        if (!Validate()) return;

        if (_connected && !string.IsNullOrWhiteSpace(_newMessage))
        {
            var userName = _userName.StartsWith("@") ? _userName : "@" + _userName;
            var channel = _channel.StartsWith("#") ? _channel : "#" + _channel;

            _messages.Add(new Message(channel, userName, _newMessage));
            await _client.SendAsync(channel, userName, _newMessage);
            _newMessage = "";
        }
    }

    async Task OnMessageKeyUp(KeyboardEventArgs args)
    {
        if (args.Key == "Enter")
        {
            await SendAsync();
        }
    }

    bool Validate()
    {
        channelValidationState = string.IsNullOrWhiteSpace(_channel) ? "is-invalid" : "";
        userNameValidationState = string.IsNullOrWhiteSpace(_userName) ? "is-invalid" : "";

        return string.IsNullOrEmpty(channelValidationState) && string.IsNullOrEmpty(userNameValidationState);
    }

    static readonly Regex BoldRegex = new Regex(@"\*(?<content>.*)\*");
    static readonly Regex ItalicsRegex = new Regex(@"\b_(?<content>.*)_\b");
    static readonly Regex InlineCodeRegex = new Regex(@"`(?<content>.*)`");
    static readonly Regex AtMentionRegex = new Regex(@"(?<content>@(\w+)\b)");
    static readonly Regex UrlRegex = new Regex(@"(?<content>(www|http:|https:)+[^\s]+[\w])");

    string FormatText(string text)
    {
        text = BoldRegex.Replace(text, "<span class=\"bold\">${content}</span>");
        text = ItalicsRegex.Replace(text, "<span class=\"italics\">${content}</span>");
        text = InlineCodeRegex.Replace(text, "<span class=\"inline-code\">${content}</span>");
        text = AtMentionRegex.Replace(text, "<span class=\"at-mention\">${content}</span>");
        text = UrlRegex.Replace(text, "<a href=\"${content}\">${content}</a>");
        text = text.Replace("\r\n", "<br/>");
        text = text.Replace("\n", "<br/>");
        text = text.Replace("\t", "&nbsp;&nbsp;&nbsp;&nbsp;");

        return text;
    }

    class Message
    {
        public Message(OutboundResponse response)
        {
            Channel = response.Channel;
            Username = response.UserId;
            Body = response.Text;
            IndicateTyping = response.IndicateTyping;
            Attachments = response.Attachments;
        }

        public Message(FileContentResponse response)
        {
            Channel = response.Channel;
            Username = response.UserId;
            FileName = response.FileName;
            FileContents = response.AsString();
        }

        public Message(string channel, string username, string body)
        {
            Channel = channel;
            Username = username;
            Body = body;
        }

        public string Channel { get; set; }
        public string Username { get; set; }
        public string Body { get; set; }
        public bool IndicateTyping { get; set; }

        public List<Attachment> Attachments { get; set; }

        public string FileName { get; set; }
        public string FileContents { get; set; }
    }
}